{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFO,QAAQC,IAAI,WAAWV,oBAA2BC,OAClDK,EAAQ,C,SAAEN,E,MAAUC,MAEpBQ,QAAQC,IAAI,WAAWV,oBAA2BC,OAClDM,EAAO,C,SAAEP,E,MAAUC,I,GAEpBA,EAAM,G,CA7CbU,SAASC,cAAc,SAASC,iBAAiB,UAAWC,IAG1DA,EAAMC,iBAMN,MAAMC,EAAQC,OAAOH,EAAMI,OAAOjB,MAAMkB,OAGlCC,EAAOH,OAAOH,EAAMI,OAAOE,KAAKD,OAGhCE,EAASJ,OAAOH,EAAMI,OAAOG,OAAOF,OAE1CV,QAAQC,IAAI,sBAAsBW,uCAA4CL,qBAAyBI,QAEvG,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAChC,MAAMC,EAAeP,EAAQI,GAAQE,EAAI,GACzCb,QAAQC,IAAI,oBAAoBY,qBAAqBC,QACrDxB,EAAcuB,EAAGC,GACdC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBQ,QAAQC,IAAI,uBAAqBV,QAAiBC,OAClDwB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEzE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBQ,QAAQC,IAAI,sBAAoBV,QAAiBC,OACjDwB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoB7B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n//Am selectat clasa form din HTML si am atasat un event listner care asteapta evenimentul submit\ndocument.querySelector('.form').addEventListener('submit', (event) => {\n  //acestui eveniment Submit i-am dat atatsat un prevent default  pentru a preveni reincarcarea paginii cand se apasa Submit,\n  //in acest fel Java Script poate sa ruleze codul in browser.\n  event.preventDefault();\n\n\n  // pentru a captura prima valoare din campul 'First Delay(ms)',apoi o coverteste intr-un numar si o asigneaza variabilei 'delay'\n  //aceasta este prima intarziere pentru prima promisiune, determina cat de lung va astepta inainte sa se rezolve sau respinge.\n  \n  const delay = Number(event.target.delay.value);\n\n  //'step' determina additional delay  pentru fiecare urmatoare promisiune dupa prima promisiune.\n  const step = Number(event.target.step.value);\n\n  // 'amount' reprezinta nr. total de promisiuni care vor fi create.\n  const amount = Number(event.target.amount.value);\n\n  console.log(`Starting to create ${amount} promises with an initial delay of ${delay}ms and a step of ${step}ms.`);\n\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = delay + step * (i - 1);\n    console.log(`Creating promise ${i} with a delay of ${currentDelay}ms.`);\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log(`Promise ${position} resolved after ${delay}ms`);\n        resolve({ position, delay });\n      } else {\n        console.log(`Promise ${position} rejected after ${delay}ms`);\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","value","step","amount","i","currentDelay","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.c8fc8459.js.map"}